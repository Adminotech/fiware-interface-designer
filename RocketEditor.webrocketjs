define([
        "lib/classy",
        "lib/three",
        "lib/three-TransformControls",
        "core/framework/TundraSDK",
        "core/script/IApplication",
        "core/scene/Scene",
        "core/scene/IComponent",
        "core/scene/Attribute",
        "core/scene/AttributeChange",
        "core/math/Transform",
        "lib/InterfaceDesigner-main"
    ], function(Class, THREE, __tc, TundraSDK, IApplication, Scene, IComponent, Attribute, AttributeChange, Transform, _Editor) {

var AddEntityCommand = ICommand.$extend(
{
    __init__ : function(scenePtr, components, name, replicated)
    {
        if (isNull(name))
            name = "";
        if (isNull(replicated))
            replicated = true;

        var commandLabel = "+add entity";
        if (name !== "")
            commandLabel += " named " + name;

        this.$super(commandLabel);
        this.scenePtr = scenePtr;
        this.components = components;
        this.name = name;
        this.replicated = replicated;
        this.id = 0;
    },

    exec : function()
    {
        var entityPtr = this.scenePtr.createEntity(this.id, this.components, null, this.replicated);
        this.id = entityPtr.id;

        if (this.name !== "")
            entityPtr.setName(this.name);
    },

    undo : function()
    {
        this.scenePtr.removeEntity(this.id);
    }
});

var RemoveEntityCommand = ICommand.$extend(
{
    __init__ : function(scenePtr, entityPtr)
    {
        var commandLabel = "-remove entity with ID " + entityPtr.id;
        if (entityPtr.getName() !== "")
            commandLabel += " named " + entityPtr.getName();

        this.$super(commandLabel);
        this.scenePtr = scenePtr;
        this.id = entityPtr.id;
        this.entityStr = "";
    },

    exec : function()
    {
        var entityPtr = this.scenePtr.entityById(this.id);
        if (isNotNull)
        {
            this.entityStr = entityPtr.serialize();
            this.scenePtr.removeEntity(this.id);
        }
    },

    undo : function()
    {
        this.scenePtr.deserializeFrom(this.entityStr);
    }
});

var AddComponentCommand = ICommand.$extend(
{
    __init__ : function(scenePtr, entityId, compType, compName, isLocal, temporary)
    {
        if (isNull(compName))
            compName = "";
        if (isNull(isLocal))
            isLocal = false;
        if (isNull(temporary))
            temporary = false;

        var commandLabel = "+add component of type " + compType;
        if (compName !== "")
            commandLabel += " named " + compName;

        this.$super(commandLabel);

        this.scenePtr = scenePtr;
        this.entityId = entityId;
        this.compName = compName;
        this.compType = compType;
        this.isLocal = isLocal;
        this.temporary = temporary;
        this.compId = -1;
    },

    exec : function()
    {
        var entityPtr = this.scenePtr.entityById(this.entityId);
        if (isNull(entityPtr))
            return;

        var componentPtr = entityPtr.createComponent(this.compType, this.compName, this.isLocal);
        if (isNotNull(componentPtr))
        {
            this.compId = componentPtr.id;
            componentPtr.setTemporary(this.temporary);
        }
    },

    undo : function()
    {
        var entityPtr = this.scenePtr.entityById(this.entityId);
        if (isNull(entityPtr))
            return;

        entityPtr.removeComponent(this.compId);
    }
});

var RemoveComponentCommand = ICommand.$extend(
{
    __init__ : function(scenePtr, componentPtr)
    {
        var commandLabel = "-remove component of type " + componentPtr.typeName;
        if (componentPtr.getName() !== "")
            commandLabel += " named " + componentPtr.getName();

        this.$super(commandLabel);
        this.scenePtr = scenePtr;
        this.entityId = componentPtr.parentId();
        this.compStr = "";
        this.compId = componentPtr.id;
    },

    exec : function()
    {
        var entityPtr = this.scenePtr.entityById(this.entityId)
        if (isNull(entityPtr))
            return;

        var componentPtr = entityPtr.componentById(this.compId);
        if (isNull(componentPtr))
            return;

        this.compStr = componentPtr.serialize();
        entityPtr.removeComponent(this.compId);
    },

    undo : function()
    {
        var entityPtr = this.scenePtr.entityById(this.entityId)
        if (isNull(entityPtr))
            return;

        var component = JSON.parse(this.compStr);
        var componentPtr = entityPtr.createComponent(component.type, component.name);
        if (isNotNull(componentPtr))
        {
            this.compId = componentPtr.id;
            componentPtr.deserialize(component);
        }
    }
});

var AddAttributeCommand = ICommand.$extend(
{
    __init__ : function(scenePtr, componentPtr, attributeName, attributeTypeId)
    {
        this.$super("+add attribute named " + attributeName + " of type " + attributeTypeId);
        this.scenePtr = scenePtr;
        this.entityId = componentPtr.parentId();
        this.compName = componentPtr.name;
        this.compType = componentPtr.typeName;
        this.attributeName = attributeName;
        this.attributeTypeId = attributeTypeId;
        this.index = -1;
    },

    exec : function()
    {
        var entityPtr = this.scenePtr.entityById(this.entityId);
        if (isNull(entityPtr))
            return;

        var componentPtr = entityPtr.getComponent(this.compType, this.compName);
        if (isNull(componentPtr))
            return;

        componentPtr.createAttribute(this.attributeTypeId, this.attributeName);
        var attributePtr = componentPtr.attributeByName(this.attributeName);
        this.index = attributePtr.index;
    },

    undo : function()
    {
        var entityPtr = this.scenePtr.entityById(this.entityId);
        if (isNull(entityPtr))
            return;

        var componentPtr = entityPtr.getComponent(this.compType, this.compName);
        if (isNull(componentPtr))
            return;

        componentPtr.removeAttribute(this.index);
    }
});

var RemoveAttributeCommand = ICommand.$extend(
{
    __init__ : function(scenePtr, attributePtr)
    {
        this.$super("-remove attribute named " + attributePtr.name + " of type " + attributePtr.typeId);
        this.scenePtr = scenePtr;
        this.entityId = attributePtr.owner.parentId();
        this.compName = attributePtr.owner.name;
        this.compType = attributePtr.owner.typeName;
        this.attributeTypeId = attributePtr.typeId;
        this.attributeName = attributePtr.name;
        this.attributeIndex = attributePtr.index;
        this.value = attributePtr.get();
    },

    exec : function()
    {
        var entityPtr = this.scenePtr.entityById(this.entityId);
        if (isNull(entityPtr))
            return;

        var componentPtr = entityPtr.getComponent(this.compType, this.compName);
        if (isNull(componentPtr))
            return;

        var attributePtr = componentPtr.getAttributeByIndex(this.attributeIndex);
        if (isNull(attributePtr))
            return;

        this.value = attributePtr.get();
        componentPtr.removeAttribute(attributePtr.index);

    },

    undo : function()
    {
        var entityPtr = this.scenePtr.entityById(this.entityId);
        if (isNull(entityPtr))
            return;

        var componentPtr = entityPtr.getComponent(this.compType, this.compName);
        if (isNull(componentPtr))
            return;

        var success = componentPtr.createAttribute(this.attributeTypeId, this.attributeName);
        if (success)
        {
            var attributePtr = componentPtr.attributeByName(this.attributeName);
            attributePtr.set(this.value);
        }
    }
});

var AttributeChangeCommand = ICommand.$extend(
{
    __init__ : function(scenePtr, attributePtr, value)
    {
        this.$super("*edit " + attributePtr.name);

        this.scenePtr = scenePtr;
        this.oldValue = attributePtr.get();
        this.newValue = value;
        this.name = attributePtr.name;
        this.index = attributePtr.index;
        this.typeId = attributePtr.typeId;

        this.compName = attributePtr.owner.name;
        this.compType = attributePtr.owner.typeName;
        this.entityId = attributePtr.owner.parentId();
    },

    set : function(value)
    {
        var entityPtr = this.scenePtr.entityById(this.entityId);
        if (isNull(entityPtr))
            return;

        var compPtr = entityPtr.getComponent(this.compType, this.compName);
        if (isNull(compPtr))
            return;

        var attrPtr = compPtr.getAttributeByIndex(this.index);
        if (isNull(attrPtr))
            return;

        attrPtr.set(value);
    },

    exec : function()
    {
        this.set(this.newValue);
    },

    undo : function()
    {
        this.set(this.oldValue);
    },
});

var CreatePrimitiveCommand = ICommand.$extend(
{
    __init__ : function(scenePtr, primitiveType, meshRef)
    {
        this.$super("+add " + primitiveType);
        this.scenePtr = scenePtr;
        this.type = primitiveType;
        this.ref = meshRef;
        this.id = 0;
    },

    exec : function()
    {
        var entity = this.scenePtr.createEntity(this.id, ["EC_Name", "EC_Placeable", "EC_Mesh"]);
        if (isNull(entity))
            return;

        this.id = entity.id;
        entity.setName(this.type);

        var meshComp = entity.getComponent("Mesh");
        if (isNull(meshComp))
            return;

        var meshRefAttr = meshComp.attributeByName("meshRef");
        if (isNull(meshRefAttr))
            return;

        meshRefAttr.set(this.ref);
    },

    undo : function()
    {
        this.scenePtr.removeEntity(this.id);
    }
});

var TransformCommand = ICommand.$extend(
{
    __init__ : function(scenePtr, placeable, mode, oldValue, newValue)
    {
        this.$super("*" + mode + " entity, ID:" + placeable.parentEntity.id);

        this.scenePtr = scenePtr;
        this.mode = mode;
        this.entityId = placeable.parentEntity.id;
        this.compName = placeable.name;
        this.compType = "EC_Placeable";
        this.oldValue = oldValue;
        this.newValue = newValue;
    },

    set : function(value)
    {
        var entityPtr = this.scenePtr.entityById(this.entityId);
        if (isNull(entityPtr))
            return;

        var compPtr = entityPtr.getComponent(this.compType, this.compName);
        if (isNull(compPtr))
            return;

        var transform = compPtr.attribute("transform").getClone();
        if (this.mode === "translate")
            transform.setPosition(value);
        else if (this.mode === "rotate")
            transform.setRotation(value);
        else if (this.mode === "scale")
            transform.setScale(value);

        compPtr.attribute("transform").set(transform);
    },

    exec : function()
    {
        this.set(this.newValue);
    },

    undo : function()
    {
        this.set(this.oldValue);
    }
});

var RocketKeyEvent = KeyEventWrapper.$extend(
{
    __init__ : function(keyEvent)
    {
        this.$super(-1);

        this.type = keyEvent.type;

        this.keyCode = keyEvent.keyCode;
        this.key = keyEvent.key;
        this.repeat = keyEvent.repeat;
        this.pressed = keyEvent.pressed;
    }
});

var RocketMouseEvent = MouseEventWrapper.$extend(
{
    __init__ : function(mouseEvent)
    {
        this.$super(-1);

        this.type = mouseEvent.type;
        this.x = mouseEvent.x;
        this.y = mouseEvent.y;

        this.relativeX = mouseEvent.relativeX;
        this.relativeY = mouseEvent.relativeY;
        this.relativeZ = mouseEvent.relativeZ;

        this.leftDown = mouseEvent.leftDown;
        this.middleDown = mouseEvent.middleDown;
        this.rightDown = mouseEvent.rightDown;

        this.targetId = mouseEvent.targetId;
        this.targetNodeName = mouseEvent.targetNodeName;
        this.originalEvent = mouseEvent.originalEvent;
    }
});

var RocketScene = SceneWrapper.$extend(
{
    __init__ : function()
    {
        this.$super();
    },

    entities : function()
    {
        var result = [];
        var entities = TundraSDK.framework.scene.entities;
        for (var i = 0; i < entities.length; i++)
            if (isNotNull(entities[i]))
                result.push(new RocketEntity(entities[i]));

        return result;
    },

    entityById : function(entityId)
    {
        var entityPtr = TundraSDK.framework.scene.entityById(entityId);
        if (entityPtr !== null && entityPtr !== undefined)
            return new RocketEntity(entityPtr);

        return null;
    },

    createEntity : function(id, components, change, replicated, componentsReplicated)
    {
        if (isNull(replicated))
            replicated = true;
        if (isNull(componentsReplicated))
            componentsReplicated = replicated;
        if (isNotNull(replicated) && isNull(change))
            change = replicated ? AttributeChange.Replicated : AttributeChange.LocalOnly;

        var entity = TundraSDK.framework.scene.createEntity(id, components, change, replicated, componentsReplicated);
        return new RocketEntity(entity);
    },

    removeEntity : function(entityId)
    {
        TundraSDK.framework.scene.removeEntity(entityId);
    },

    deserializeFrom : function(str)
    {
        var entity = JSON.parse(str);
        var entityPtr = this.entityById(entity.id);
        if (isNull(entityPtr))
            entityPtr = this.createEntity(entity.id, [], null, !entity.local);

        if (isNotNull(entityPtr))
            entityPtr.deserialize(entity);
    },

    registeredComponents : function()
    {
        return Scene.registeredComponentsList();
    },

    doesAllowSameNamedComponents : function()
    {
        return false;
    },

    componentNameWithPrefix : function(componentName)
    {
        return IComponent.ensureComponentNamePrefix(componentName);
    },

    componentNameInHumanFormat : function(typeName)
    {
        if (typeName.indexOf("EC_") == 0)
        {
            var compNameNoEC = typeName.substring(3);
            if (compNameNoEC == "DynamicComponent")
                compNameNoEC = "Dynamic";

            return compNameNoEC;
        }
        else
            return typeName;
    },

    doRaycast : function(x, y, selectionLayer)
    {
        var result = TundraSDK.framework.renderer.raycast(x, y, selectionLayer);
        return new RocketRaycastResult(result);
    },

    isAttributeAtomic : function(attrTypeId)
    {
        return (attrTypeId === Attribute.String ||
                attrTypeId === Attribute.Int ||
                attrTypeId === Attribute.Real ||
                attrTypeId === Attribute.Bool ||
                attrTypeId === Attribute.UInt ||
                attrTypeId === Attribute.AssetReference ||
                attrTypeId === Attribute.EntityReference ||
                attrTypeId === Attribute.QVariant);
    },

    isAttributeBool : function(attrTypeId)
    {
        return (attrTypeId === Attribute.Bool);
    },

    /// AssetReferenceList and QVariantList technically are arrays
    isAttributeArray : function(attrTypeId)
    {
        return (attrTypeId === Attribute.AssetReferenceList ||
                attrTypeId === Attribute.QVariantList);
    },

    /// Transform is the most complex attribute we have
    isAttributeTransform : function(attrTypeId)
    {
        return (attrTypeId === Attribute.Transform);
    },

    isAttributeColor : function(attrTypeId)
    {
        return (attrTypeId === Attribute.Color);
    },

    /// Color/QPoint/Float2, Float3, Float4/Quat are tuples
    /// returns number of elements in the tuple, or 0 if not tuple
    isAttributeTuple : function(attrTypeId)
    {
        if (attrTypeId === Attribute.Color ||
           attrTypeId === Attribute.Float4 ||
           attrTypeId === Attribute.Quat)
            return 4;
        else if (attrTypeId === Attribute.Float3)
            return 3;
        else if (attrTypeId === Attribute.Float2 ||
                attrTypeId === Attribute.QPoint)
            return 2;
        else
            return 0;
    },

    // Returns a type name for a given type ID
    attributeTypeToName : function(attrTypeId)
    {
        return Attribute.toTypeName(attrTypeId);
    },

    attributeTypeIds : function()
    {
        return Attribute.typeIds();
    },

    reset : function()
    {
        TundraSDK.framework.scene.reset();
    },

    unsubscribe : function(subscription)
    {
        TundraSDK.framework.events.unsubscribe(subscription);
    },

    entityCreated : function(context, callback)
    {
        this.registerCallback("onEntityCreated", context, callback);
        return TundraSDK.framework.scene.onEntityCreated(this, this._onEntityCreated);
    },

    entityRemoved : function(context, callback)
    {
        this.registerCallback("onEntityRemoved", context, callback);
        return TundraSDK.framework.scene.onEntityRemoved(this, this._onEntityRemoved);
    },

    componentCreated : function(context, callback)
    {
        this.registerCallback("onComponentCreated", context, callback);
        return TundraSDK.framework.scene.onComponentCreated(this, this._onComponentCreated);
    },

    componentRemoved : function(context, callback)
    {
        this.registerCallback("onComponentRemoved", context, callback);
        return TundraSDK.framework.scene.onComponentRemoved(this, this._onComponentRemoved);
    },

    attributeChanged : function(context, callback)
    {
        this.registerCallback("onAttributeChanged", context, callback);
        return TundraSDK.framework.scene.onAttributeChanged(this, this._onAttributeChanged);
    },

    sceneReset : function(context, callback)
    {
        this.registerCallback("onSceneReset", context, callback);
        return TundraSDK.framework.scene.onReset(this, this._onSceneReset);
    },

    _onEntityCreated : function(entityPtr)
    {
        var entity = new RocketEntity(entityPtr);
        this.callback("onEntityCreated", entity);
    },

    _onEntityRemoved : function(entityPtr)
    {
        var entity = new RocketEntity(entityPtr);
        this.callback("onEntityRemoved", entity);
    },

    _onComponentCreated : function(entityPtr, componentPtr)
    {
        var entity = new RocketEntity(entityPtr);
        var component = new RocketComponent(componentPtr);

        this.callback("onComponentCreated", entity, component);
    },

    _onComponentRemoved : function(entityPtr, componentPtr)
    {
        var entity = new RocketEntity(entityPtr);
        var component = new RocketComponent(componentPtr);

        this.callback("onComponentRemoved", entity, component);
    },

    _onAttributeChanged : function(entityPtr, componentPtr, attributeIndex, attributeName, attributeValue)
    {
        var entity = new RocketEntity(entityPtr);
        var component = new RocketComponent(componentPtr);

        this.callback("onAttributeChanged", entity, component, attributeIndex, attributeName, attributeValue);
    },

    _onSceneReset : function()
    {
        this.callback("onSceneReset");
    },

    logInfo : function(text)
    {
        TundraSDK.framework.client.logInfo("[Editor]: " + text);
    },

    logWarning : function(text)
    {
        TundraSDK.framework.client.logWarning("[Editor]: " + text);
    },

    logError : function(text)
    {
        TundraSDK.framework.client.logError("[Editor]: " + text);
    }    
});

var RocketEntity = EntityWrapper.$extend(
{
    __init__ : function(entityPtr)
    {
        this.$super(entityPtr.id, entityPtr.name, entityPtr.local, entityPtr.temporary);
        this._ptr = entityPtr;

        this.callbacks = {};
    },

    setName : function(name)
    {
        if (this.expired())
            return;

        this.name = name;
        this._ptr.setName(name);
    },

    getName : function()
    {
        return this._ptr.getName();
    },

    components : function()
    {
        var result = [];
        if (this.expired())
            return result;

        for (var i = 0; i < this._ptr.components.length; i++)
        {
            var componentPtr = this._ptr.components[i];
            result.push(new RocketComponent(componentPtr));
        }

        return result;
    },

    createComponent : function(typeName, name, isLocal)
    {
        if (this.expired())
            return null;

        var attrChange = isLocal ? AttributeChange.LocalOnly : AttributeChange.Replicated;
        var componentPtr = this._ptr.createComponent(typeName, name, attrChange);
        if (isNotNull(componentPtr))
            return new RocketComponent(componentPtr);

        return null;
    },

    hasComponent : function(type, name)
    {
        return isNotNull(this.getComponent(type, name));
    },

    getComponent : function(type, name)
    {
        if (this.expired())
            return null;

        var componentPtr = this._ptr.getComponent(type, name);
        if (componentPtr !== null && componentPtr !== undefined)
            return new RocketComponent(componentPtr);

        return null;
    },

    componentById : function(componentId)
    {
        if (this.expired())
            return null;

        var componentPtr = this._ptr.getComponentById(componentId);
        if (componentPtr !== null && componentPtr !== undefined)
            return new RocketComponent(componentPtr);

        return null;
    },

    removeComponent : function(componentId)
    {
        if (this.expired())
            return;

        this._ptr.removeComponent(componentId);
    },

    serialize : function()
    {
        var result = {};

        result.id = this.id;
        result.name = this.name;
        result.local = this.local;
        result.temporary = this.temporary;

        result.components = [];
        var comps = this.components();
        for (var i = 0; i < comps.length; i++)
            result.components.push(comps[i].serialize());

        return JSON.stringify(result);
    },

    deserialize : function(entity)
    {
        for (var i = 0; i < entity.components.length; i++)
        {
            var component = JSON.parse(entity.components[i]);
            var componentPtr = this.createComponent(component.type, component.name);
            if (isNotNull(componentPtr))
                componentPtr.deserialize(component);
        }
    },

    onComponentCreated : function(context, callback)
    {
        this.registerCallback("onComponentCreated", context, callback);
        return this._ptr.onComponentCreated(this, this._onComponentCreated);
    },

    onComponentRemoved : function(context, callback)
    {
        this.registerCallback("onComponentRemoved", context, callback);
        return this._ptr.onComponentRemoved(this, this._onComponentRemoved);
    },

    _onComponentCreated : function(entity, component)
    {
        var entityPtr = new RocketEntity(entity);
        var componentPtr = new RocketComponent(component);

        this.callback("onComponentCreated", entityPtr, componentPtr);
    },

    _onComponentRemoved : function(entity, component)
    {
        var entityPtr = new RocketEntity(entity);
        var componentPtr = new RocketComponent(component);

        this.callback("onComponentRemoved", entityPtr, componentPtr);
    }
});

var RocketComponent = ComponentWrapper.$extend(
{
    __init__ : function(componentPtr)
    {
        this.$super(componentPtr.id, componentPtr.name, componentPtr.typeName, componentPtr.parentEntity.id);
        this._ptr = componentPtr;

        this.callbacks = {};
    },

    isDynamic : function()
    {
        if (this.expired())
            return false;

        return this._ptr.isDynamic();
    },

    setTemporary : function(temporary)
    {
        if (this.expired())
            return;

        this._ptr.temporary = temporary;
    },

    attributes : function()
    {
        var result = [];
        if (this.expired())
            return result;

        for (var i in this._ptr.attributes)
        {
            var attributePtr = this._ptr.attributes[i];
            if (isNotNull(attributePtr))
                result.push(new RocketAttribute(attributePtr, this));
        }

        return result;
    },

    createAttribute : function(typeId, name)
    {
        if (this.expired())
            return null;

        return (this.isDynamic() && this._ptr.createAttribute(typeId, name, null, true));
    },

    attributeByName : function(name)
    {
        if (this.expired())
            return null;

        var attributePtr = this._ptr.attributes[name];
        if (isNotNull(attributePtr))
            return new RocketAttribute(attributePtr, this);

        return null;
    },

    getAttributeByIndex : function(index)
    {
        if (this.expired())
            return null;

        return new RocketAttribute(this._ptr.getAttributeByIndex(index), this);
    },

    removeAttribute : function(index)
    {
        if (this.expired())
            return false;

        return (this.isDynamic() && this._ptr.removeAttribute(index));
    },

    serialize : function()
    {
        var result = {};

        result.id = this.id;
        result.name = this.name;
        result.type = this.typeName;
        result.local = this.local;
        result.temporary = this.temporary;
        result.attributes = [];

        var attrs = this.attributes();
        for (var i = 0; i < attrs.length; i++)
            result.attributes.push(attrs[i].serialize());

        return JSON.stringify(result);
    },

    deserialize : function(component)
    {
        var attributes = component.attributes;
        for (var i = 0; i < attributes.length; i++)
        {
            var attr = JSON.parse(attributes[i]);
            var attrPtr = null;
            if (this.isDynamic())
            {
                var success = this.createAttribute(attr.typeId, attr.name);
                if (success)
                    attrPtr = this.attributeByName(attr.name);
            }
            else
                attrPtr = this.getAttributeByIndex(attr.index);

            if (isNotNull(attrPtr))
                attrPtr.deserialize(attr);
        }
    },

    onAttributeAdded : function(context, callback)
    {
        if (this.expired())
            return;

        if (!this.isDynamic())
            return;

        this.registerCallback("onAttributeAdded", context, callback);
        return this._ptr.onAttributeAdded(this, this._onAttributeAdded);
    },

    onAttributeChanged : function(context, callback)
    {
        if (this.expired())
            return;

        this.registerCallback("onAttributeChanged", context, callback);
        return this._ptr.onAttributeChanged(this, this._onAttributeChanged);
    },

    onAttributeAboutToBeRemoved : function(context, callback)
    {
        if (this.expired())
            return;

        if (!this.isDynamic())
            return;

        this.registerCallback("onAttributeAboutToBeRemoved", context, callback);
        return this._ptr.onAttributeAboutToBeRemoved(this, this._onAttributeAboutToBeRemoved);
    },

    _onAttributeAdded : function(component, attribute)
    {
        var componentPtr = new RocketComponent(component);
        var attributePtr = new RocketAttribute(attribute, componentPtr);

        this.callback("onAttributeAdded", componentPtr, attributePtr);
    },

    _onAttributeChanged : function(entity, component, attributeIndex, attributeName, attributeValue)
    {
        var entityPtr = new RocketEntity(entity);
        var componentPtr = new RocketComponent(component);

        this.callback("onAttributeChanged", entityPtr, componentPtr, attributeIndex, attributeName, attributeValue);
    },

    _onAttributeAboutToBeRemoved : function(component, attributeIndex, attributeName)
    {
        var componentPtr = new RocketComponent(component);

        this.callback("onAttributeAboutToBeRemoved", componentPtr, attributeIndex, attributeName);
    }
});

var RocketAttribute = AttributeWrapper.$extend(
{
    __init__ : function(attributePtr, owner)
    {
        var parent = null;
        if (isNull(owner))
            parent = new RocketComponent(attributePtr.owner);
        else
            parent = owner;

        this.$super(attributePtr.index, attributePtr.typeId, attributePtr.name, parent);
        this._ptr = attributePtr;
    },

    get : function()
    {
        if (this.expired())
            return null;

        return this._ptr.getClone();
    },

    set : function(value)
    {
        if (this.expired())
            return;

        this._ptr.set(value);
    },

    serialize : function()
    {
        var result = { 
            name : this.name,
            typeId : this.typeId,
            index : this.index
        };

        var value = this.get();
        if (this.typeId === Attribute.Transform)
            result.value = {
                pos : value.pos,
                rot : value.rot,
                scale : value.scale
            };       
        else
            result.value = value;

        return JSON.stringify(result);
    },

    deserialize : function(attribute)
    {
        if (attribute.typeId === Attribute.Transform)
        {
            var attrValue = attribute.value;
            var pos = new THREE.Vector3(attrValue.pos.x, attrValue.pos.y, attrValue.pos.z);
            var rot = new THREE.Vector3(attrValue.rot.x, attrValue.rot.y, attrValue.rot.z);
            var scale = new THREE.Vector3(attrValue.scale.x, attrValue.scale.y, attrValue.scale.z);

            var transform = new Transform(pos, rot, scale);
            this.set(transform);
        }
        else
            this.set(attribute.value)
    }
});

var RocketRaycastResult = RaycastResult.$extend(
{
    __init__ : function(raycastResult)
    {
        this.$super();

        if (isNotNull(raycastResult.entity))
            this.entity = new RocketEntity(raycastResult.entity);
        if (isNotNull(raycastResult.component))
            this.component = new RocketComponent(raycastResult.component);

        this.pos = raycastResult.pos;
        this.distance = raycastResult.distance;
        this.submesh = raycastResult.submesh;
        this.faceIndex = raycastResult.faceIndex;
        this.ray = raycastResult.ray;
    }
});

var RocketEditor = IEditor.$extend(
{
    __classvars__ : 
    {
        scene : null
    },

    __init__ : function()
    {
        this.$super("rocket");

        this.meshRefs = {
            "Ball" : "http://meshmoon.data.s3.amazonaws.com/asset-library/meshes/primitives/Sphere.mesh",
            "Cube" : "http://meshmoon.data.s3.amazonaws.com/asset-library/meshes/primitives/Cube.mesh",
            "Cone" : "http://meshmoon.data.s3.amazonaws.com/asset-library/meshes/primitives/Cone.mesh",
            "Cylinder" : "http://meshmoon.data.s3.amazonaws.com/asset-library/meshes/primitives/Cylinder.mesh"
        };

        this.axisHelper = new THREE.AxisHelper(100);
        this.gridHelper = new THREE.GridHelper(100,5);
        this.gridHelper.setColors(new THREE.Color(0xFF0000), new THREE.Color(0x000000));
    },

    /* virtual */ 
    isConnected : function()
    {
        return TundraSDK.framework.client.isConnected();
    },

    /* virtual */
    width : function()
    {
        return TundraSDK.framework.client.container.width();
    },

    /* virtual */
    height : function()
    {
        var containerHeight = TundraSDK.framework.client.container.height();
        var taskbarHeight = TundraSDK.framework.ui.taskbar.height();

        return containerHeight - taskbarHeight;
    },

    taskbar : function()
    {
        return TundraSDK.framework.client.ui.taskbar;
    },

    container : function()
    {
        return TundraSDK.framework.client.container;
    },

    /* pure virtual */
    addWidget : function(element)
    {
        TundraSDK.framework.ui.addWidgetToScene(element);
    },

    /* pure virtual */ 
    registerClientConnectedCallback : function(context, callback)
    {
        TundraSDK.framework.client.onConnected(context, callback);
    },

    /* pure virtual */ 
    registerKeyEventCallback : function(context, callback)
    {
        this.registerCallback("onKeyEvent", context, callback);
        TundraSDK.framework.input.onKeyEvent(this, this.onKeyEvent);
    },

    /* pure virtual */ 
    registerMouseEventCallback : function(context, callback)
    {
        this.registerCallback("onMouseEvent", context, callback);
        TundraSDK.framework.input.onMouseEvent(this, this.onMouseEvent);
    },

    /* pure virtual */
    registerResizeEventCallback : function(context, callback)
    {
        this.registerCallback("onResizeEvent", context, callback);
        TundraSDK.framework.ui.onWindowResize(this, this.onResizeEvent);
    },

    registerSceneObject : function()
    {
        RocketEditor.scene = new RocketScene();
        return RocketEditor.scene;
    },

    onKeyEvent : function(keyEvent)
    {
        this.callback("onKeyEvent", new RocketKeyEvent(keyEvent));
    },

    onMouseEvent : function(mouseEvent)
    {
        this.callback("onMouseEvent", new RocketMouseEvent(mouseEvent));
    },

    onResizeEvent : function(width, height)
    {
        this.callback("onResizeEvent", width, height);
    },

    initTransformEditor : function()
    {
        this.transformEditor = new TransformEditor();
    },

    createPrimitive : function(type)
    {
        this.undoStack.pushAndExec(new CreatePrimitiveCommand(RocketEditor.scene, type, this.meshRefs[type]));
    },

    createMovable : function()
    {
        this.addEntityCommand(["EC_Placeable"], "movable", true);
    },

    createDrawable : function()
    {
        this.addEntityCommand(["EC_Placeable", "EC_Mesh"], "drawable", true);
    },

    createScript : function()
    {
        this.addEntityCommand(["EC_Script"], "script", true);
    },

    showGrid : function()
    {
        TundraSDK.framework.renderer.scene.add(this.gridHelper);
    },

    hideGrid : function()
    {
        TundraSDK.framework.renderer.scene.remove(this.gridHelper);
    },

    showAxes : function()
    {
        TundraSDK.framework.renderer.scene.add(this.axisHelper);
    },

    hideAxes : function()
    {
        TundraSDK.framework.renderer.scene.remove(this.axisHelper);
    },

    addEntityCommand : function(components, entityName, replicated)
    {
        this.undoStack.pushAndExec(new AddEntityCommand(RocketEditor.scene, components, entityName, replicated));
    },

    removeEntityCommand : function(entityPtr)
    {
        this.undoStack.pushAndExec(new RemoveEntityCommand(RocketEditor.scene, entityPtr));
    },

    addComponentCommand : function(entityId, compType, compName, isLocal, temporary)
    {
        this.undoStack.pushAndExec(new AddComponentCommand(RocketEditor.scene, entityId, compType, compName, isLocal, temporary));
    },

    removeComponentCommand : function(componentPtr)
    {
        this.undoStack.pushAndExec(new RemoveComponentCommand(RocketEditor.scene, componentPtr));
    },

    addAttributeCommand : function(componentPtr, attrTypeId, attrName)
    {
        var existing = componentPtr.attributeByName(attrName);
        if (isNotNull(existing))
            return false;

        this.undoStack.pushAndExec(new AddAttributeCommand(RocketEditor.scene, componentPtr, attrName, attrTypeId));
        return true;
    },

    removeAttributeCommand : function(attributePtr)
    {
        this.undoStack.pushAndExec(new RemoveAttributeCommand(RocketEditor.scene, attributePtr));   
    },

    changeAttributeCommand : function(attributePtr, newValue)
    {
        this.undoStack.pushAndExec(new AttributeChangeCommand(RocketEditor.scene, attributePtr, newValue));
    }
});

var TransformEditor = Class.$extend(
{
   __init__ : function()
    {
        var camera = TundraSDK.framework.renderer.camera;
        var domElement = TundraSDK.framework.renderer.renderer.domElement;

        this.wireframeHelper = null;
        this.targetPlaceable = null;
        this.cameraSubscription = null;

        this.oldTransform = null;

        this.transformControl = new THREE.TransformControls(camera, domElement);
        this.transformControl.setSpace("local");
        this.transformControl.addEventListener("change", this.onUpdate.bind(this));
        this.transformControl.addEventListener("dragStart", this.onDragStarted.bind(this));
        this.transformControl.addEventListener("dragStop", this.onDragStopped.bind(this));

        this.cameraSubscription = TundraSDK.framework.renderer.onActiveCameraChanged(this, this.onActiveCameraChanged);
        TundraSDK.framework.frame.onUpdate(this, this.onFrameUpdate);
    },

    setTargetEntity : function(entity)
    {
        this.clearSelection();

        if (isNull(entity))
            return;

        var entityPtr = entity._ptr;

        this.targetPlaceable = entityPtr.getComponent("Placeable");
        if (isNull(this.targetPlaceable))
        {
            this.clearSelection();
            return;
        }

        this.oldTransform = this.targetPlaceable.attribute("transform").getClone();
        this.transformControl.attach(this.targetPlaceable.sceneNode);
        TundraSDK.framework.renderer.scene.add(this.transformControl);

        var mesh = entityPtr.mesh;
        if (isNotNull(mesh))
        {
            if (isNull(this.wireframeHelper))
            {
                var meshClone = mesh.meshAsset.mesh.children[0].clone();
                this.wireframeHelper = new THREE.WireframeHelper(meshClone, 0x00ffff);
                this.wireframeHelper.material.linewidth = 2;
                this.wireframeHelper.visible = false;
                TundraSDK.framework.renderer.scene.add(this.wireframeHelper);
            }
        }
    },

    setMode : function(mode)
    {
        this.transformControl.setMode(mode);
    },

    onFrameUpdate : function(frametime)
    {
        if (this.transformControl.isAttached())
            this.transformControl.update();
    },

    onActiveCameraChanged : function(activeCam, previousCam)
    {
        this.transformControl.setCamera(activeCam.camera);
    },

    onUpdate : function(event)
    {
        var transform = this.targetPlaceable.attribute("transform").getClone();
        transform.setPosition(this.targetPlaceable.sceneNode.position.clone());
        transform.setRotation(this.targetPlaceable.sceneNode.quaternion.clone());
        transform.setScale(this.targetPlaceable.sceneNode.scale.clone());

        this.targetPlaceable.attribute("transform").set(transform);
    },

    onDragStarted : function(event)
    {
        if (event.detail.object === this.targetPlaceable.sceneNode)
        {
            this.oldTransform = this.targetPlaceable.attribute("transform").getClone();

            if (isNotNull(this.wireframeHelper))
            {
                var mesh = this.targetPlaceable.parentEntity.mesh;
                if (isNull(mesh))
                    return;

                var nodeTransformation = mesh.attribute("nodeTransformation").getClone();
                var wireTransform = this.oldTransform.clone();
                wireTransform.pos.add(nodeTransformation.pos);
                wireTransform.scale.multiply(nodeTransformation.scale);

                var oldOrientation = wireTransform.orientation();
                oldOrientation.multiply(nodeTransformation.orientation());
                wireTransform.setRotation(oldOrientation);

                this.wireframeHelper.position = wireTransform.pos;
                this.wireframeHelper.scale = wireTransform.scale;
                this.wireframeHelper.quaternion = wireTransform.orientation();
                this.wireframeHelper.updateMatrix();
                this.wireframeHelper.updateMatrixWorld();

                this.wireframeHelper.visible = true;
            }
        }
    },

    onDragStopped : function(event)
    {
        if (event.detail.object === this.targetPlaceable.sceneNode)
        {
            if (isNotNull(this.wireframeHelper))
                this.wireframeHelper.visible = false;

            var value = null;
            var newValue = null;
            var transform = this.targetPlaceable.attribute("transform").getClone();

            if (event.detail.mode === "translate")
            {
                value = this.oldTransform.pos.clone();
                newValue = transform.pos;
            }
            else if (event.detail.mode === "rotate")
            {
                value = this.oldTransform.rot.clone();
                newValue = transform.rot;
            }
            else if (event.detail.mode === "scale")
            {
                value = this.oldTransform.scale.clone();
                newValue = transform.scale;
            }
            else
            {
                RocketEditor.scene.logError("Unknown transform mode:", event.detail.mode);
                return;
            }

            IEditor.Instance.undoStack.pushCommand(new TransformCommand(TundraSDK.framework.scene, this.targetPlaceable, event.detail.mode, value, newValue));
        }
    },

    clearSelection : function()
    {
        if (isNotNull(this.cameraSubscription))
            TundraSDK.framework.events.unsubscribe(this.cameraSubscription);

        this.transformControl.detach();
        TundraSDK.framework.renderer.scene.remove(this.transformControl);

        if (isNotNull(this.wireframeHelper))
        {
            TundraSDK.framework.renderer.scene.remove(this.wireframeHelper);
            this.wireframeHelper = null;
        }

        this.targetPlaceable = null;
        this.cameraSubscription = null;
        this.oldTransform = null;
    }
});

// Main IApplication object
var EditorApplication = IApplication.$extend(
{
    __init__ : function()
    {
        this.$super("Editor");
        var editor = new RocketEditor("rocket");
    }
})

return EditorApplication;

});
